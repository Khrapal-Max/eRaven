// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using eRaven.Infrastructure;

#nullable disable

namespace eRaven.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250926163521_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "btree_gist");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("eRaven.Domain.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AttachedFromUnit")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("attached_from_unit");

                    b.Property<string>("BZVP")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("bzvp");

                    b.Property<string>("Callsign")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("callsign");

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsAttached")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_attached");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("middle_name");

                    b.Property<DateTime>("ModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("PositionUnitId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_unit_id");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("rank");

                    b.Property<string>("Rnokpp")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("rnokpp");

                    b.Property<int?>("StatusKindId")
                        .HasColumnType("integer")
                        .HasColumnName("status_kind_id");

                    b.Property<string>("Weapon")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("weapon");

                    b.HasKey("Id");

                    b.HasIndex("PositionUnitId")
                        .IsUnique()
                        .HasDatabaseName("ux_persons_position_unit_id_not_null")
                        .HasFilter("\"position_unit_id\" IS NOT NULL");

                    b.HasIndex("Rnokpp")
                        .IsUnique()
                        .HasDatabaseName("ix_persons_rnokpp");

                    b.HasIndex("StatusKindId");

                    b.HasIndex("LastName", "FirstName", "MiddleName")
                        .HasDatabaseName("ix_persons_fullname");

                    b.ToTable("persons", (string)null);
                });

            modelBuilder.Entity("eRaven.Domain.Models.PersonPositionAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasDefaultValue("system")
                        .HasColumnName("author");

                    b.Property<DateTime?>("CloseUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("close_utc");

                    b.Property<DateTime>("ModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Note")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("note");

                    b.Property<DateTime>("OpenUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("open_utc");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<Guid>("PositionUnitId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_unit_id");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasDatabaseName("ux_ppassign_person_open")
                        .HasFilter("close_utc IS NULL");

                    b.HasIndex("PositionUnitId")
                        .IsUnique()
                        .HasDatabaseName("ux_ppassign_position_open")
                        .HasFilter("close_utc IS NULL");

                    b.HasIndex("PersonId", "CloseUtc")
                        .HasDatabaseName("ix_ppassign_person_close");

                    b.HasIndex("PersonId", "OpenUtc")
                        .HasDatabaseName("ix_ppassign_person_open");

                    b.HasIndex("PositionUnitId", "OpenUtc")
                        .HasDatabaseName("ix_ppassign_position_open");

                    b.ToTable("person_position_assignments", null, t =>
                        {
                            t.HasCheckConstraint("ck_person_position_assignments_dates", "(close_utc IS NULL) OR (close_utc > open_utc)");
                        });
                });

            modelBuilder.Entity("eRaven.Domain.Models.PersonStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasDefaultValue("system")
                        .HasColumnName("author");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Note")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("note");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("open_date");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<short>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("sequence");

                    b.Property<Guid?>("SourceDocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_document_id");

                    b.Property<string>("SourceDocumentType")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("source_document_type");

                    b.Property<int>("StatusKindId")
                        .HasColumnType("integer")
                        .HasColumnName("status_kind_id");

                    b.HasKey("Id");

                    b.HasIndex("StatusKindId");

                    b.HasIndex("PersonId", "OpenDate")
                        .HasDatabaseName("ix_person_statuses_person_open");

                    b.HasIndex("SourceDocumentType", "SourceDocumentId")
                        .HasDatabaseName("ix_person_statuses_source_document");

                    b.HasIndex("PersonId", "IsActive", "OpenDate")
                        .HasDatabaseName("ix_person_statuses_person_active_open");

                    b.HasIndex("PersonId", "OpenDate", "Sequence")
                        .IsUnique()
                        .HasDatabaseName("ux_person_statuses_person_open_seq_active")
                        .HasFilter("is_active = TRUE");

                    b.ToTable("person_statuses", (string)null);
                });

            modelBuilder.Entity("eRaven.Domain.Models.PlanAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<short>("ActionState")
                        .HasColumnType("smallint")
                        .HasColumnName("action_state");

                    b.Property<string>("BZVP")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("bzvp");

                    b.Property<string>("Callsign")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("callsign");

                    b.Property<string>("CrewName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("crew_name");

                    b.Property<DateTime>("EffectiveAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_at_utc");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("full_name");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("group_name");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("location");

                    b.Property<short>("MoveType")
                        .HasColumnType("smallint")
                        .HasColumnName("move_type");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("note");

                    b.Property<string>("Order")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("order_name");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<string>("PlanActionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("plan_action_name");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("position_name");

                    b.Property<string>("RankName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("rank_name");

                    b.Property<string>("Rnokpp")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("rnokpp");

                    b.Property<string>("StatusKindOnDate")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("status_kind_on_date");

                    b.Property<int?>("ToStatusKindId")
                        .HasColumnType("integer")
                        .HasColumnName("to_status_kind_id");

                    b.Property<string>("Weapon")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("weapon");

                    b.HasKey("Id");

                    b.HasIndex("MoveType")
                        .HasDatabaseName("ix_plan_actions_move_type");

                    b.HasIndex("PersonId", "EffectiveAtUtc")
                        .HasDatabaseName("ix_plan_actions_person_date");

                    b.ToTable("plan_actions", (string)null);
                });

            modelBuilder.Entity("eRaven.Domain.Models.PositionUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("code");

                    b.Property<bool>("IsActived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("OrgPath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("org_path");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("short_name");

                    b.Property<string>("SpecialNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("special_number");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasDatabaseName("ix_position_units_code");

                    b.HasIndex("ShortName")
                        .HasDatabaseName("ix_position_units_short_name");

                    b.HasIndex("SpecialNumber")
                        .HasDatabaseName("ix_position_units_number");

                    b.ToTable("position_units", (string)null);
                });

            modelBuilder.Entity("eRaven.Domain.Models.StatusKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasDefaultValue("system")
                        .HasColumnName("author");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("code");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("order");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasDatabaseName("ix_status_kinds_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_status_kinds_name");

                    b.ToTable("status_kinds", null, t =>
                        {
                            t.HasCheckConstraint("ck_status_kinds_code_not_blank", "length(trim(code)) > 0");

                            t.HasCheckConstraint("ck_status_kinds_name_not_blank", "length(trim(name)) > 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "system",
                            Code = "30",
                            IsActive = true,
                            Modified = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "В районі",
                            Order = 10
                        },
                        new
                        {
                            Id = 2,
                            Author = "system",
                            Code = "100",
                            IsActive = true,
                            Modified = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "В БР",
                            Order = 100
                        },
                        new
                        {
                            Id = 6,
                            Author = "system",
                            Code = "100",
                            IsActive = true,
                            Modified = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "В БТГр",
                            Order = 100
                        },
                        new
                        {
                            Id = 5,
                            Author = "system",
                            Code = "РОЗПОР",
                            IsActive = true,
                            Modified = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Розпорядження",
                            Order = 40
                        },
                        new
                        {
                            Id = 3,
                            Author = "system",
                            Code = "нб",
                            IsActive = true,
                            Modified = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Переміщення",
                            Order = 50
                        },
                        new
                        {
                            Id = 4,
                            Author = "system",
                            Code = "нб",
                            IsActive = true,
                            Modified = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Звільнення",
                            Order = 50
                        },
                        new
                        {
                            Id = 7,
                            Author = "system",
                            Code = "ВДР",
                            IsActive = true,
                            Modified = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Відрядження",
                            Order = 80
                        },
                        new
                        {
                            Id = 8,
                            Author = "system",
                            Code = "ВДР",
                            IsActive = true,
                            Modified = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Фахове навчання",
                            Order = 80
                        },
                        new
                        {
                            Id = 9,
                            Author = "system",
                            Code = "В",
                            IsActive = true,
                            Modified = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Відпустка",
                            Order = 90
                        },
                        new
                        {
                            Id = 10,
                            Author = "system",
                            Code = "Л_Х",
                            IsActive = true,
                            Modified = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Проходження ВЛК",
                            Order = 120
                        },
                        new
                        {
                            Id = 11,
                            Author = "system",
                            Code = "Л_Х",
                            IsActive = true,
                            Modified = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Направлення на МСЕК",
                            Order = 120
                        },
                        new
                        {
                            Id = 12,
                            Author = "system",
                            Code = "Л_Х",
                            IsActive = true,
                            Modified = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Лікування по хворобі",
                            Order = 120
                        },
                        new
                        {
                            Id = 13,
                            Author = "system",
                            Code = "Л_Б",
                            IsActive = true,
                            Modified = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Лікування по пораненню",
                            Order = 130
                        },
                        new
                        {
                            Id = 14,
                            Author = "system",
                            Code = "БВ",
                            IsActive = true,
                            Modified = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Безвісті",
                            Order = 170
                        },
                        new
                        {
                            Id = 15,
                            Author = "system",
                            Code = "П",
                            IsActive = true,
                            Modified = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Полон",
                            Order = 175
                        },
                        new
                        {
                            Id = 17,
                            Author = "system",
                            Code = "А",
                            IsActive = true,
                            Modified = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Арешт",
                            Order = 178
                        },
                        new
                        {
                            Id = 18,
                            Author = "system",
                            Code = "СЗЧ",
                            IsActive = true,
                            Modified = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "СЗЧ",
                            Order = 180
                        },
                        new
                        {
                            Id = 16,
                            Author = "system",
                            Code = "200",
                            IsActive = true,
                            Modified = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Загибель",
                            Order = 190
                        });
                });

            modelBuilder.Entity("eRaven.Domain.Models.StatusTransition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FromStatusKindId")
                        .HasColumnType("integer")
                        .HasColumnName("from_status_kind_id");

                    b.Property<int>("ToStatusKindId")
                        .HasColumnType("integer")
                        .HasColumnName("to_status_kind_id");

                    b.HasKey("Id");

                    b.HasIndex("ToStatusKindId");

                    b.HasIndex("FromStatusKindId", "ToStatusKindId")
                        .IsUnique()
                        .HasDatabaseName("ix_status_transitions_from_to");

                    b.ToTable("status_transitions", null, t =>
                        {
                            t.HasCheckConstraint("ck_status_transitions_from_ne_to", "from_status_kind_id <> to_status_kind_id");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FromStatusKindId = 1,
                            ToStatusKindId = 2
                        },
                        new
                        {
                            Id = 2,
                            FromStatusKindId = 1,
                            ToStatusKindId = 3
                        },
                        new
                        {
                            Id = 3,
                            FromStatusKindId = 1,
                            ToStatusKindId = 4
                        },
                        new
                        {
                            Id = 4,
                            FromStatusKindId = 1,
                            ToStatusKindId = 5
                        },
                        new
                        {
                            Id = 5,
                            FromStatusKindId = 1,
                            ToStatusKindId = 6
                        },
                        new
                        {
                            Id = 6,
                            FromStatusKindId = 1,
                            ToStatusKindId = 7
                        },
                        new
                        {
                            Id = 7,
                            FromStatusKindId = 1,
                            ToStatusKindId = 8
                        },
                        new
                        {
                            Id = 8,
                            FromStatusKindId = 1,
                            ToStatusKindId = 9
                        },
                        new
                        {
                            Id = 9,
                            FromStatusKindId = 1,
                            ToStatusKindId = 10
                        },
                        new
                        {
                            Id = 10,
                            FromStatusKindId = 1,
                            ToStatusKindId = 11
                        },
                        new
                        {
                            Id = 11,
                            FromStatusKindId = 1,
                            ToStatusKindId = 12
                        },
                        new
                        {
                            Id = 12,
                            FromStatusKindId = 1,
                            ToStatusKindId = 13
                        },
                        new
                        {
                            Id = 13,
                            FromStatusKindId = 1,
                            ToStatusKindId = 14
                        },
                        new
                        {
                            Id = 14,
                            FromStatusKindId = 1,
                            ToStatusKindId = 15
                        },
                        new
                        {
                            Id = 15,
                            FromStatusKindId = 1,
                            ToStatusKindId = 16
                        },
                        new
                        {
                            Id = 16,
                            FromStatusKindId = 1,
                            ToStatusKindId = 17
                        },
                        new
                        {
                            Id = 17,
                            FromStatusKindId = 1,
                            ToStatusKindId = 18
                        },
                        new
                        {
                            Id = 18,
                            FromStatusKindId = 2,
                            ToStatusKindId = 1
                        },
                        new
                        {
                            Id = 19,
                            FromStatusKindId = 2,
                            ToStatusKindId = 12
                        },
                        new
                        {
                            Id = 20,
                            FromStatusKindId = 2,
                            ToStatusKindId = 13
                        },
                        new
                        {
                            Id = 21,
                            FromStatusKindId = 2,
                            ToStatusKindId = 14
                        },
                        new
                        {
                            Id = 22,
                            FromStatusKindId = 2,
                            ToStatusKindId = 15
                        },
                        new
                        {
                            Id = 23,
                            FromStatusKindId = 2,
                            ToStatusKindId = 16
                        },
                        new
                        {
                            Id = 24,
                            FromStatusKindId = 2,
                            ToStatusKindId = 18
                        },
                        new
                        {
                            Id = 25,
                            FromStatusKindId = 3,
                            ToStatusKindId = 1
                        },
                        new
                        {
                            Id = 26,
                            FromStatusKindId = 3,
                            ToStatusKindId = 12
                        },
                        new
                        {
                            Id = 27,
                            FromStatusKindId = 3,
                            ToStatusKindId = 13
                        },
                        new
                        {
                            Id = 28,
                            FromStatusKindId = 3,
                            ToStatusKindId = 14
                        },
                        new
                        {
                            Id = 29,
                            FromStatusKindId = 3,
                            ToStatusKindId = 15
                        },
                        new
                        {
                            Id = 30,
                            FromStatusKindId = 3,
                            ToStatusKindId = 16
                        },
                        new
                        {
                            Id = 31,
                            FromStatusKindId = 3,
                            ToStatusKindId = 18
                        },
                        new
                        {
                            Id = 32,
                            FromStatusKindId = 4,
                            ToStatusKindId = 1
                        },
                        new
                        {
                            Id = 33,
                            FromStatusKindId = 5,
                            ToStatusKindId = 1
                        },
                        new
                        {
                            Id = 34,
                            FromStatusKindId = 6,
                            ToStatusKindId = 1
                        },
                        new
                        {
                            Id = 35,
                            FromStatusKindId = 7,
                            ToStatusKindId = 1
                        },
                        new
                        {
                            Id = 36,
                            FromStatusKindId = 7,
                            ToStatusKindId = 18
                        },
                        new
                        {
                            Id = 37,
                            FromStatusKindId = 8,
                            ToStatusKindId = 1
                        },
                        new
                        {
                            Id = 38,
                            FromStatusKindId = 8,
                            ToStatusKindId = 18
                        },
                        new
                        {
                            Id = 39,
                            FromStatusKindId = 9,
                            ToStatusKindId = 1
                        },
                        new
                        {
                            Id = 40,
                            FromStatusKindId = 9,
                            ToStatusKindId = 18
                        },
                        new
                        {
                            Id = 41,
                            FromStatusKindId = 10,
                            ToStatusKindId = 1
                        },
                        new
                        {
                            Id = 42,
                            FromStatusKindId = 10,
                            ToStatusKindId = 6
                        },
                        new
                        {
                            Id = 43,
                            FromStatusKindId = 10,
                            ToStatusKindId = 18
                        },
                        new
                        {
                            Id = 44,
                            FromStatusKindId = 11,
                            ToStatusKindId = 1
                        },
                        new
                        {
                            Id = 45,
                            FromStatusKindId = 11,
                            ToStatusKindId = 6
                        },
                        new
                        {
                            Id = 46,
                            FromStatusKindId = 11,
                            ToStatusKindId = 18
                        },
                        new
                        {
                            Id = 47,
                            FromStatusKindId = 12,
                            ToStatusKindId = 1
                        },
                        new
                        {
                            Id = 48,
                            FromStatusKindId = 12,
                            ToStatusKindId = 6
                        },
                        new
                        {
                            Id = 49,
                            FromStatusKindId = 12,
                            ToStatusKindId = 18
                        },
                        new
                        {
                            Id = 50,
                            FromStatusKindId = 13,
                            ToStatusKindId = 1
                        },
                        new
                        {
                            Id = 51,
                            FromStatusKindId = 13,
                            ToStatusKindId = 6
                        },
                        new
                        {
                            Id = 52,
                            FromStatusKindId = 13,
                            ToStatusKindId = 18
                        },
                        new
                        {
                            Id = 53,
                            FromStatusKindId = 14,
                            ToStatusKindId = 1
                        },
                        new
                        {
                            Id = 54,
                            FromStatusKindId = 14,
                            ToStatusKindId = 6
                        },
                        new
                        {
                            Id = 55,
                            FromStatusKindId = 15,
                            ToStatusKindId = 1
                        },
                        new
                        {
                            Id = 56,
                            FromStatusKindId = 15,
                            ToStatusKindId = 6
                        },
                        new
                        {
                            Id = 57,
                            FromStatusKindId = 18,
                            ToStatusKindId = 1
                        },
                        new
                        {
                            Id = 58,
                            FromStatusKindId = 18,
                            ToStatusKindId = 6
                        },
                        new
                        {
                            Id = 59,
                            FromStatusKindId = 17,
                            ToStatusKindId = 1
                        },
                        new
                        {
                            Id = 60,
                            FromStatusKindId = 17,
                            ToStatusKindId = 6
                        },
                        new
                        {
                            Id = 61,
                            FromStatusKindId = 16,
                            ToStatusKindId = 5
                        },
                        new
                        {
                            Id = 62,
                            FromStatusKindId = 16,
                            ToStatusKindId = 6
                        });
                });

            modelBuilder.Entity("eRaven.Domain.Models.Person", b =>
                {
                    b.HasOne("eRaven.Domain.Models.PositionUnit", "PositionUnit")
                        .WithOne("CurrentPerson")
                        .HasForeignKey("eRaven.Domain.Models.Person", "PositionUnitId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("eRaven.Domain.Models.StatusKind", "StatusKind")
                        .WithMany()
                        .HasForeignKey("StatusKindId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PositionUnit");

                    b.Navigation("StatusKind");
                });

            modelBuilder.Entity("eRaven.Domain.Models.PersonPositionAssignment", b =>
                {
                    b.HasOne("eRaven.Domain.Models.Person", "Person")
                        .WithMany("PositionAssignments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eRaven.Domain.Models.PositionUnit", "PositionUnit")
                        .WithMany()
                        .HasForeignKey("PositionUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("PositionUnit");
                });

            modelBuilder.Entity("eRaven.Domain.Models.PersonStatus", b =>
                {
                    b.HasOne("eRaven.Domain.Models.Person", "Person")
                        .WithMany("StatusHistory")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eRaven.Domain.Models.StatusKind", "StatusKind")
                        .WithMany()
                        .HasForeignKey("StatusKindId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("StatusKind");
                });

            modelBuilder.Entity("eRaven.Domain.Models.PlanAction", b =>
                {
                    b.HasOne("eRaven.Domain.Models.Person", "Person")
                        .WithMany("PlanActions")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("eRaven.Domain.Models.StatusTransition", b =>
                {
                    b.HasOne("eRaven.Domain.Models.StatusKind", "FromStatusKind")
                        .WithMany()
                        .HasForeignKey("FromStatusKindId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eRaven.Domain.Models.StatusKind", "ToStatusKind")
                        .WithMany()
                        .HasForeignKey("ToStatusKindId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromStatusKind");

                    b.Navigation("ToStatusKind");
                });

            modelBuilder.Entity("eRaven.Domain.Models.Person", b =>
                {
                    b.Navigation("PlanActions");

                    b.Navigation("PositionAssignments");

                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("eRaven.Domain.Models.PositionUnit", b =>
                {
                    b.Navigation("CurrentPerson");
                });
#pragma warning restore 612, 618
        }
    }
}
